{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport * as io from \"socket.io-client\";\nimport { SOCKET_BASE_URL } from \"../constants/apiConstants\";\nexport const useSocket = room => {\n  _s();\n\n  const [socket, setSocket] = useState();\n  const [socketResponse, setSocketResponse] = useState({\n    room: \"\",\n    content: \"\",\n    username: \"\",\n    messageType: \"\",\n    createdDateTime: \"\"\n  });\n  const [isConnected, setConnected] = useState(false);\n  const sendData = useCallback(payload => {\n    socket.emit(\"send_message\", {\n      room: room,\n      content: payload.content,\n      username: username,\n      messageType: \"CLIENT\"\n    });\n  }, [socket, room]);\n  useEffect(() => {\n    const s = io(SOCKET_BASE_URL, {\n      reconnection: false,\n      query: `&room=${room}`\n    });\n    setSocket(s);\n    s.on(\"connect\", () => setConnected(true));\n    console.log(connect);\n    s.on(\"read_message\", res => {\n      console.log(res);\n    });\n    console.log(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []); // return { socketResponse, isConnected, sendData };\n};\n\n_s(useSocket, \"Xg7iAw8ssifA3hKRXDsMkPvYKqs=\");","map":{"version":3,"names":["useCallback","useEffect","useState","io","SOCKET_BASE_URL","useSocket","room","socket","setSocket","socketResponse","setSocketResponse","content","username","messageType","createdDateTime","isConnected","setConnected","sendData","payload","emit","s","reconnection","query","on","console","log","connect","res","disconnect"],"sources":["/Users/truonghuythai/Documents/chat/socketio-simple-chat/frontend/src/customHooks/useSocket.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport * as io from \"socket.io-client\";\nimport { SOCKET_BASE_URL } from \"../constants/apiConstants\";\n\nexport const useSocket = (room) => {\n  const [socket, setSocket] = useState();\n  const [socketResponse, setSocketResponse] = useState({\n    room: \"\",\n    content: \"\",\n    username: \"\",\n    messageType: \"\",\n    createdDateTime: \"\",\n  });\n  const [isConnected, setConnected] = useState(false);\n  const sendData = useCallback(\n    (payload) => {\n      socket.emit(\"send_message\", {\n        room: room,\n        content: payload.content,\n        username: username,\n        messageType: \"CLIENT\",\n      });\n    },\n    [socket, room]\n  );\n  useEffect(() => {\n    const s = io(SOCKET_BASE_URL, {\n      reconnection: false,\n      query: `&room=${room}`,\n    });\n    setSocket(s);\n    s.on(\"connect\", () => setConnected(true));\n    console.log(connect);\n    s.on(\"read_message\", (res) => {\n      console.log(res);\n    });\n    console.log(s)\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  // return { socketResponse, isConnected, sendData };\n};\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAEA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAU;EAAA;;EACjC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;EACA,MAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC;IACnDI,IAAI,EAAE,EAD6C;IAEnDK,OAAO,EAAE,EAF0C;IAGnDC,QAAQ,EAAE,EAHyC;IAInDC,WAAW,EAAE,EAJsC;IAKnDC,eAAe,EAAE;EALkC,CAAD,CAApD;EAOA,MAAM,CAACC,WAAD,EAAcC,YAAd,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAMe,QAAQ,GAAGjB,WAAW,CACzBkB,OAAD,IAAa;IACXX,MAAM,CAACY,IAAP,CAAY,cAAZ,EAA4B;MAC1Bb,IAAI,EAAEA,IADoB;MAE1BK,OAAO,EAAEO,OAAO,CAACP,OAFS;MAG1BC,QAAQ,EAAEA,QAHgB;MAI1BC,WAAW,EAAE;IAJa,CAA5B;EAMD,CARyB,EAS1B,CAACN,MAAD,EAASD,IAAT,CAT0B,CAA5B;EAWAL,SAAS,CAAC,MAAM;IACd,MAAMmB,CAAC,GAAGjB,EAAE,CAACC,eAAD,EAAkB;MAC5BiB,YAAY,EAAE,KADc;MAE5BC,KAAK,EAAG,SAAQhB,IAAK;IAFO,CAAlB,CAAZ;IAIAE,SAAS,CAACY,CAAD,CAAT;IACAA,CAAC,CAACG,EAAF,CAAK,SAAL,EAAgB,MAAMP,YAAY,CAAC,IAAD,CAAlC;IACAQ,OAAO,CAACC,GAAR,CAAYC,OAAZ;IACAN,CAAC,CAACG,EAAF,CAAK,cAAL,EAAsBI,GAAD,IAAS;MAC5BH,OAAO,CAACC,GAAR,CAAYE,GAAZ;IACD,CAFD;IAGAH,OAAO,CAACC,GAAR,CAAYL,CAAZ;IACA,OAAO,MAAM;MACXA,CAAC,CAACQ,UAAF;IACD,CAFD;EAGD,CAfQ,EAeN,EAfM,CAAT,CArBiC,CAsCjC;AACD,CAvCM;;GAAMvB,S"},"metadata":{},"sourceType":"module"}